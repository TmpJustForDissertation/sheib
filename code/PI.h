#ifndef PI_H_INCLUDED
#define PI_H_INCLUDED
#include <set>
#include <list>
#include <map>
#include <iostream>
/*
    PI class is used to save the parameters supported by sheib. It will saved by every created object.
*/
//used to save a result.
struct Result{
    int * x=NULL;
    int o=2;
    double g;
    double * g1;
};
//used to compare results.
struct CompResult{
    bool operator()(struct Result * const & r1, struct Result * const & r2) const{
        if(r1->o<r2->o)
            return true;
        else{
            for(int i=0;i<r1->o;i++){
                if(r1->x[i]<r2->x[i])
                    return true;
                else if(r1->x[i]>r2->x[i])
                    return false;
            }
            return false;
        }
    }
};
class PI{
public:
    //some parameters used in performing simulated experiments.
    const char * tail=(char *)".result.sseh.txt";
    const int numPopInDME100=80;
    const int maxGenInDME100=40;
    const int numPopInDNME100=80;
    const int maxGenInDNME100=40;
    const int numPopInDME1000=800;
    const int maxGenInDME1000=140;
    const int numPopInDNME1000=800;
    const int maxGenInDNME1000=140;
    const int numPopInDNME3100=80;
    const int maxGenInDNME3100=400;
    //The Bio object.
    void * bio=NULL;
    //Path of gene-mapping data.
    char * filenameSNP2Genes=NULL;
    //Path of gene association data.
    char * filenameAssociatedGenes=NULL;
    //Perform simulated experiments or not.
    int sim=0;
    //File type of GWAS data.
    int type=0;
    //Show the echo information every nshow iterations.
    int nShow=4;
    //Random seed of sheib.
    int seed=0;
    //Start the control system or not.
    int cs=0;
    /*
        The thresholds which determines which epistatic interactions are significant.
    */
    double cG=0.05;
    double cGc=1;//0.05;
    //Start time of sheib.
    clock_t startTime;
    //Max order of SNP combination generated in sheib.
    int o=-1;
    //Max iteration times.
    int maxGen=-1;
    //The probability of considering bioinformation while generating new SNP combinations.
    double pb=0.8;
    //Path of input file.
    char * filename=(char *)"data.txt";
    //Path of output file.
    char * filenameO=(char *)"result.txt";
    //Result size.
    int rn=-1;
    //used to save results.
    std::set<struct Result *,CompResult> results;
    //used to access the set of results.
    std::set<struct Result *>::iterator itr;
    //used to save results.
    std::list<struct Result *> resultList;
    //used to access the list of resultList.
    std::list<struct Result *>::iterator itrl;
    //GWAS data in memory. The object of class MEM.
    void * mem=NULL;
    //SNP number in GWAS data.
    int n=-1;
    //The number of SNP combinations which have been generated by sheib.
    int gen=0;
    //The epistatic model in the provided simulated GWAS file. It is only used in simulated experiments.
    struct Result * solution=NULL;
    //The function is called to specify the parameters.
    bool fillParameters(int argc,char * argv[]);
    //Print the parameters.
    void print();
    //Print the document of sheib.
    void printDocument();
    //Add result to result and resultList.
    void addResult(int * x, int l,double g);
    //Write results to the output file.
    void generateResult();
    //Calculate criteria in the simulated experiments.
    void getTP(int & tp, int & fp, int & tn, int & fn, int & po);
    ~PI();
    //Called in the simulated experiments.
    void clearMe();
    //Create and fill the pi->solution based on the pi->filename.
    void buildSolution();
};


#endif // PI_H_INCLUDED
